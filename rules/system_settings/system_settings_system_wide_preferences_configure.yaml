id: system_settings_system_wide_preferences_configure
title: Require Administrator Password to Modify System-Wide Preferences
discussion: |
  The system _MUST_ be configured to require an administrator password in order to modify the system-wide preferences in System Settings.

  Some Preference Panes in System Settings contain settings that affect the entire system. Requiring a password to unlock these system-wide settings reduces the risk of a non-authorized user modifying system configurations.
references:
  nist:
    cce:
      sequoia:
        - CCE-94401-7
      sonoma:
        - CCE-92996-8
      ventura:
        - CCE-91986-0
    800-53r5:
      - AC-6
      - AC-6(2)
      - AC-6(1)
    800-171r3:
      - 03.01.07
  disa:
    cci:
      - CCI-002235
    srg:
      - SRG-OS-000324-GPOS-00125
      - SRG-OS-000480-GPOS-00228
    disa_stig:
      sequoia:
        - APPL-15-002069
      sonoma:
        - APPL-14-002069
      ventura:
        - APPL-13-002069
    cmmc:
      - AC.L1-3.1.1
      - AC.L2-3.1.5
      - AC.L2-3.1.6
  cis:
    benchmark:
      sequoia:
        - 2.6.8 (level 1)
      sonoma:
        - 2.6.8 (level 1)
      ventura:
        - 2.6.7 (level 1)
    controls_v8:
      - 4.1
platforms:
  macOS:
    check: |
      authDBs=("system.preferences" "system.preferences.energysaver" "system.preferences.network" "system.preferences.printing" "system.preferences.sharing" "system.preferences.softwareupdate" "system.preferences.startupdisk" "system.preferences.timemachine")
      result="1"
      for section in ${authDBs[@]}; do
        if [[ $(/usr/bin/security -q authorizationdb read "$section" | /usr/bin/xmllint -xpath 'name(//*[contains(text(), "shared")]/following-sibling::*[1])' -) != "false" ]]; then
          result="0"
        fi
        if [[ $(/usr/bin/security -q authorizationdb read "$section" | /usr/bin/xmllint -xpath '//*[contains(text(), "group")]/following-sibling::*[1]/text()' - ) != "admin" ]]; then
          result="0"
        fi
        if [[ $(/usr/bin/security -q authorizationdb read "$section" | /usr/bin/xmllint -xpath 'name(//*[contains(text(), "authenticate-user")]/following-sibling::*[1])' -) != "true" ]]; then
          result="0"
        fi
        if [[ $(/usr/bin/security -q authorizationdb read "$section" | /usr/bin/xmllint -xpath 'name(//*[contains(text(), "session-owner")]/following-sibling::*[1])' -) != "false" ]]; then
          result="0"
        fi
      done
      echo $result
    result:
      integer: 1
    fix: "[source,bash]\n----\nauthDBs=(\"system.preferences\" \"system.preferences.energysaver\" \"system.preferences.network\" \"system.preferences.printing\" \"system.preferences.sharing\" \"system.preferences.softwareupdate\" \"system.preferences.startupdisk\" \"system.preferences.timemachine\")\n\nfor section in ${authDBs[@]}; do\n  /usr/bin/security -q authorizationdb read \"$section\" > \"/tmp/$section.plist\"\n\n  class_key_value=$(/usr/libexec/PlistBuddy -c \"Print :class\" \"/tmp/$section.plist\" 2>&1)\n  if [[ \"$class_key_value\" == *\"Does Not Exist\"* ]]; then\n    /usr/libexec/PlistBuddy -c \"Add :class string user\" \"/tmp/$section.plist\"\n  else\n    /usr/libexec/PlistBuddy -c \"Set :class user\" \"/tmp/$section.plist\"\n  fi\n\n  key_value=$(/usr/libexec/PlistBuddy -c \"Print :shared\" \"/tmp/$section.plist\" 2>&1)  \t\n  if [[ \"$key_value\" == *\"Does Not Exist\"* ]]; then\n    /usr/libexec/PlistBuddy -c \"Add :shared bool false\" \"/tmp/$section.plist\"\n  else\n    /usr/libexec/PlistBuddy -c \"Set :shared false\" \"/tmp/$section.plist\"\n  fi\n\n  auth_user_key=$(/usr/libexec/PlistBuddy -c \"Print :authenticate-user\" \"/tmp/$section.plist\" 2>&1)  \t\n  if [[ \"$auth_user_key\" == *\"Does Not Exist\"* ]]; then\n    /usr/libexec/PlistBuddy -c \"Add :authenticate-user bool true\" \"/tmp/$section.plist\"\n  else\n    /usr/libexec/PlistBuddy -c \"Set :authenticate-user true\" \"/tmp/$section.plist\"\n  fi\n\n  session_owner_key=$(/usr/libexec/PlistBuddy -c \"Print :session-owner\" \"/tmp/$section.plist\" 2>&1)  \t\n  if [[ \"$session_owner_key\" == *\"Does Not Exist\"* ]]; then\n    /usr/libexec/PlistBuddy -c \"Add :session-owner bool false\" \"/tmp/$section.plist\"\n  else\n    /usr/libexec/PlistBuddy -c \"Set :session-owner false\" \"/tmp/$section.plist\"\n  fi\n\n  group_key=$(/usr/libexec/PlistBuddy -c \"Print :group\" \"/tmp/$section.plist\" 2>&1)\n  if [[ \"$group_key\" == *\"Does Not Exist\"* ]]; then\n    /usr/libexec/PlistBuddy -c \"Add :group string admin\" \"/tmp/$section.plist\"\n  else\n    /usr/libexec/PlistBuddy -c \"Set :group admin\" \"/tmp/$section.plist\"\n  fi\n\n  /usr/bin/security -q authorizationdb write \"$section\" < \"/tmp/$section.plist\"\ndone\n----\n"
    sequoia:
      severity: high
      benchmarks:
        - cis_lvl1
        - cis_lvl2
        - disa_stig
    sonoma:
      severity: high
      benchmarks:
        - cis_lvl1
        - cis_lvl2
        - disa_stig
    ventura:
      severity: medium
      benchmarks:
        - cis_lvl1
        - cis_lvl2
        - disa_stig
tags:
  - 800-53r5_moderate
  - 800-53r5_high
  - 800-171
  - cisv8
  - cnssi-1253_low
  - cnssi-1253_high
  - cmmc_lvl2
  - cmmc_lvl1
  - cnssi-1253_moderate
